syntax = "proto3";

option go_package = "../../proto";

package main;

//import "github.com/gogo/protobuf/gogoproto/gogo.proto";

service Greeter {
    
    rpc GetBooksStorage(GetBooksRequest) returns (BooksReply){};
    rpc CreateBookStorage(CreateBookRequest) returns (CreateBookReply){};
    rpc DeleteBookStorage(DeleteBookRequest) returns (DeleteBookReply){};
    rpc TakeABookStorage(TakeABookRequest) returns (TakeABookReply){};
    rpc GetBookStorage(GetBookRequest) returns ( GetBookReply){};
    rpc ReturnABookStorage(ReturnABookRequest) returns (ReturnABookReply){};
    rpc UpdateBookStorage(UpdateBookRequest) returns (UpdateBookReply){};
    rpc GetNotTakenBookByIds(GetNotTakenBookByIdsRequest) returns (GetNotTakenBookByIdsReply);

    rpc CreateClientStorage(CreateClientRequest) returns (CreateClientReply){};
    rpc GetClientsStorage(GetClientsRequest) returns (GetClientsReply){};
    rpc DeleteClientStorage(DeleteClientRequest) returns (DeleteClientReply){};
    rpc GetClientStorage(GetClientRequest) returns (GetClientReply){};
    rpc UpdateClientStorage(UpdateClientRequest) returns (UpdateClientReply){};
    rpc GetBooksByClientIdStorage(GetBooksByClientIdRequest) returns (GetBooksByClientIdReply){};
    rpc StatusClientByBooks(StatusClientByBooksRequest) returns (StatusClientByBooksReply){};



  }

  message BooksReply {
    map<int64,Book> Books = 1;
  }

  message GetBooksRequest {}

  message Book{
    int32 ID = 1;
	  string Author = 2;
	  string Title = 3;
	  int64 ClientID = 4;
	  bool IsTaken = 5;
  }

  message Client{
    int32 ID = 1;
    string Name = 2;
    string PhoneName =3;
    }
  
  message CreateBookRequest{
    Book Book = 1;
  }

  message CreateBookReply{}

  message DeleteBookRequest{
    int64 Id = 1;
  }

  message DeleteBookReply{}

message TakeABookRequest{
  int64 ClientId = 1;
//  repeated google.protobuf.ListValue Ids = 2;
  repeated int64 Ids = 3;
  //[(gogv b oproto.nullable) = false];
}

message  TakeABookReply{
  repeated int64 Ids = 1;
}

message GetBookRequest{
  int64 ID =1;
}

message GetBookReply{
  Book Book = 1;
}

message ReturnABookRequest{
  int64 ID = 1;
}

message ReturnABookReply{
}

message UpdateBookRequest{
  int64 ID = 1;
  Book Book = 2;
}

message UpdateBookReply{
  bool StatusReply = 1;
}

message CreateClientRequest{
  Client Client = 1;
}

message CreateClientReply{}

message  GetClientsRequest{}

message  GetClientsReply{
  map<int64,Client> ClientList = 1;
}

message DeleteClientRequest{
  int64 ID = 1;
}

message DeleteClientReply{}

message GetClientRequest{
  int64 ID = 1;
}

message GetClientReply{
  Client Client = 1;
  bool StatusReply = 2;
  }

message UpdateClientRequest{
  int64 ID = 1;
  Client Client = 2;
  }

message UpdateClientReply{
  bool StatusReply = 1;
}

message GetBooksByClientIdRequest{
  int64 ID = 1;

}

message GetBooksByClientIdReply{
  map<int64,Book> BookList = 1;
}

message StatusClientByBooksRequest{
  int64 ID =1;
}

message StatusClientByBooksReply{
  bool IsTaken = 1;
}

message GetNotTakenBookByIdsRequest{
  repeated int64 Ids = 1;
}

message GetNotTakenBookByIdsReply{
  map<int64,Book> BookList = 1;
}